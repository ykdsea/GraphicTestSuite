/* * Copyright (c) 2017 Amlogic, Inc. All rights reserved. * * This source code is subject to the terms and conditions defined in the * file 'LICENSE' which is part of this source code package. * * Description: */package com.amlogic.graphictestsuite;import android.app.Activity;import android.content.Intent;import android.os.Bundle;import android.support.annotation.Nullable;import android.view.View;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.ListView;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;import java.util.Queue;public class ComposerTest extends Activity implements View.OnClickListener {    private int count = 0;  //计数器，记录当前有几层layer    private String result;  //记录输入的 surfaceView 的所有参数    private List<String> data = new ArrayList<>();    //接收 surface_parameter 中的参数    SurfaceViewEntity surfaceViewParam = new SurfaceViewEntity();    //利用 queue 传递多 layers    Queue<SurfaceViewEntity> queue = new LinkedList<>();    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.composer_test);        initView();    }    private void initView() {        Button but1, but2;        but1 = (Button) findViewById(R.id.button_add);        but2 = (Button) findViewById(R.id.button_show);        but1.setOnClickListener(this);        but2.setOnClickListener(this);    }    //更新 ListView 以显示新增的 layer 属性    private void updateView() {        ListView listView;        listView = (ListView) findViewById(R.id.list_layers);        listView.setAdapter(new ArrayAdapter<>                (this, android.R.layout.simple_expandable_list_item_1, getData()));        ++count;    //新增 layer 计数器加一    }    private List<String> getData() {        data.add(result);        return data;    }    @Override    public void onClick(View v) {        Intent intent;        switch (v.getId()) {            case R.id.button_add:                intent = new Intent(this, SetSurfaceViewParam.class);                startActivityForResult(intent, 1);                break;            case R.id.button_show:                intent = new Intent(this, SurfaceViewActivity.class);                setParamToShow(intent);                startActivity(intent);                break;            default:                break;        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        if (resultCode == RESULT_CANCELED)            return;        copyData(data);        formatResult();        //将每个 layer 的 surfaceParam 添加至 Queue        queue.offer(surfaceViewParam);        updateView();    }    //取得 setting_param 返回的封装了 surface_param 的对象    private void copyData(Intent data) {        surfaceViewParam = (SurfaceViewEntity) data.getSerializableExtra("surfaceViewParam");    }    //格式化参数便于显示    private void formatResult() {        surfaceViewParam.setCount(count);        result = surfaceViewParam.toString();    }    //将保存了封装的 surface_param 的 queue 传递到 ShowSurfaceView 显示    private void setParamToShow(Intent intent) {        int count = 0;        while(queue.size() > 0) {            ++count;            surfaceViewParam = queue.remove();            intent.putExtra("layers"+count, surfaceViewParam);        }        //将总共的 layers 传递过去便于取值        intent.putExtra("layers_total", count);    }}